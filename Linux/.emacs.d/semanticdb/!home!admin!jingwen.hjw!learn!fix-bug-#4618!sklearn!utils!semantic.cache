;; Object utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utils/"
  :tables
  (list
    (semanticdb-table "testing.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Testing utilities.\"\"\"" code nil nil [1 25])
            ("os" include nil nil [232 241])
            ("inspect" include nil nil [242 256])
            ("pkgutil" include nil nil [257 271])
            ("warnings" include nil nil [272 287])
            ("sys" include nil nil [288 298])
            ("re" include nil nil [299 308])
            ("platform" include nil nil [309 324])
            ("scipy" include nil nil [326 344])
            ("scipy.io" include nil nil [345 360])
            ("functools" include nil nil [361 388])
            ("try" code nil nil [389 589])
            ("sklearn" include nil nil [590 604])
            ("sklearn.base" include nil nil [605 643])
            ("nose.tools" include nil nil [696 731])
            ("nose.tools" include nil nil [732 771])
            ("nose.tools" include nil nil [772 806])
            ("nose.tools" include nil nil [807 842])
            ("nose.tools" include nil nil [843 879])
            ("nose.tools" include nil nil [880 909])
            ("nose" include nil nil [910 935])
            ("nose" include nil nil [936 963])
            ("numpy.testing" include nil nil [965 1010])
            ("numpy.testing" include nil nil [1011 1055])
            ("numpy.testing" include nil nil [1056 1107])
            ("numpy.testing" include nil nil [1108 1151])
            ("numpy" include nil nil [1152 1170])
            ("" code nil nil [1197 1288])
            ("__all__" variable nil nil [1290 1660])
            ("try" code nil nil [1663 1970])
            ("try" code nil nil [1971 2880])
            ("assert_raises_regexp" variable nil nil [3043 3085])
            ("_assert_less" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3105 3106])
                ("b" variable nil (reparse-symbol function_parameters) [3108 3109])
                ("msg" variable nil (reparse-symbol function_parameters) [3111 3114]))              ) nil [3088 3251])
            ("_assert_greater" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3273 3274])
                ("b" variable nil (reparse-symbol function_parameters) [3276 3277])
                ("msg" variable nil (reparse-symbol function_parameters) [3279 3282]))              ) nil [3253 3421])
            ("assert_less_equal" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3445 3446])
                ("b" variable nil (reparse-symbol function_parameters) [3448 3449])
                ("msg" variable nil (reparse-symbol function_parameters) [3451 3454]))              ) nil [3423 3604])
            ("assert_greater_equal" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [3631 3632])
                ("b" variable nil (reparse-symbol function_parameters) [3634 3635])
                ("msg" variable nil (reparse-symbol function_parameters) [3637 3640]))              ) nil [3606 3792])
            ("assert_warns" function
               (:documentation "Test that a certain warning occurs.

    Parameters
    ----------
    warning_class : the warning class
        The class to test for, e.g. UserWarning.

    func : callable
        Calable object to trigger warnings.

    *args : the positional arguments to `func`.

    **kw : the keyword arguments to `func`

    Returns
    -------

    result : the return value of `func`

    "
                :arguments 
                  ( ("warning_class" variable nil (reparse-symbol function_parameters) [3811 3824])
                    ("func" variable nil (reparse-symbol function_parameters) [3826 3830])
                    ("args" variable nil (reparse-symbol function_parameters) [3832 3837])
                    ("kw" variable nil (reparse-symbol function_parameters) [3839 3843]))                  )
                nil [3794 5186])
            ("assert_warns_message" function
               (:documentation "Test that a certain warning occurs and with a certain message.

    Parameters
    ----------
    warning_class : the warning class
        The class to test for, e.g. UserWarning.

    message : str | callable
        The entire message or a substring to  test for. If callable,
        it takes a string as argument and will trigger an assertion error
        if it returns `False`.

    func : callable
        Calable object to trigger warnings.

    *args : the positional arguments to `func`.

    **kw : the keyword arguments to `func`.

    Returns
    -------

    result : the return value of `func`

    "
                :arguments 
                  ( ("warning_class" variable nil (reparse-symbol function_parameters) [5213 5226])
                    ("message" variable nil (reparse-symbol function_parameters) [5228 5235])
                    ("func" variable nil (reparse-symbol function_parameters) [5237 5241])
                    ("args" variable nil (reparse-symbol function_parameters) [5243 5248])
                    ("kw" variable nil (reparse-symbol function_parameters) [5250 5254]))                  )
                nil [5188 7719])
            ("assert_no_warnings" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [7782 7786])
                ("args" variable nil (reparse-symbol function_parameters) [7788 7793])
                ("kw" variable nil (reparse-symbol function_parameters) [7795 7799]))              ) nil [7759 8517])
            ("ignore_warnings" function
               (:documentation " Context manager and decorator to ignore warnings

    Note. Using this (in both variants) will clear all warnings
    from all python modules loaded. In case you need to test
    cross-module-warning-logging this is not your tool of choice.

    Examples
    --------
    >>> with ignore_warnings():
    ...     warnings.warn('buhuhuhu')

    >>> def nasty_warn():
    ...    warnings.warn('buhuhuhu')
    ...    print(42)

    >>> ignore_warnings(nasty_warn)()
    42

    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [8539 8542]))                  )
                nil [8519 9138])
            ("_ignore_warnings" function
               (:documentation "Decorator to catch and hide warnings without visual nesting"
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [9161 9163]))                  )
                nil [9140 9564])
            ("_IgnoreWarnings" type
               (:documentation "Improved and simplified Python warnings context manager

    Copied from Python 2.7.5 and modified as required.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parameters
        ==========
        category : warning class
            The category to filter. Defaults to Warning. If None,
            all categories will be muted.
        \"\"\"" code nil (reparse-symbol indented_block_body) [9758 9952])
                            ("self" variable nil (reparse-symbol indented_block_body) [9961 9980])
                            ("self" variable nil (reparse-symbol indented_block_body) [9989 10027])
                            ("self" variable nil (reparse-symbol indented_block_body) [10036 10057])
                            ("self" variable nil (reparse-symbol indented_block_body) [10066 10079]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9743 9747]))                          
                        :documentation "
        Parameters
        ==========
        category : warning class
            The category to filter. Defaults to Warning. If None,
            all categories will be muted.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9730 10080])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10098 10102]))                          )
                        (reparse-symbol indented_block_body) [10085 10380])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10399 10403]))                          )
                        (reparse-symbol indented_block_body) [10385 11075])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11093 11097])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [11099 11108]))                          )
                        (reparse-symbol indented_block_body) [11080 11419]))                  
                :type "class")
                nil [9566 11419])
            ("try" code nil nil [11421 11516])
            ("try" code nil nil [11517 11621])
            ("_assert_allclose" function (:arguments 
              ( ("actual" variable nil (reparse-symbol function_parameters) [11644 11650])
                ("desired" variable nil (reparse-symbol function_parameters) [11652 11659])
                ("rtol" variable nil (reparse-symbol function_parameters) [11661 11665])
                ("atol" variable nil (reparse-symbol function_parameters) [11672 11676])
                ("err_msg" variable nil (reparse-symbol function_parameters) [11701 11708])
                ("verbose" variable nil (reparse-symbol function_parameters) [11713 11720]))              ) nil [11623 12029])
            ("if" code nil nil [12031 12168])
            ("assert_raise_message" function
               (:documentation "Helper function to test error messages in exceptions"
                :arguments 
                  ( ("exception" variable nil (reparse-symbol function_parameters) [12195 12204])
                    ("message" variable nil (reparse-symbol function_parameters) [12206 12213])
                    ("function" variable nil (reparse-symbol function_parameters) [12215 12223])
                    ("args" variable nil (reparse-symbol function_parameters) [12225 12230])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [12232 12240]))                  )
                nil [12170 12397])
            ("fake_mldata" function
               (:documentation "Create a fake mldata data set.

    Parameters
    ----------
    columns_dict : dict, keys=str, values=ndarray
        Contains data as columns_dict[column_name] = array of data.

    dataname : string
        Name of data set.

    matfile : string or file object
        The file name string or the file-like object of the output file.

    ordering : list, default None
        List of column_names, determines the ordering in the data set.

    Notes
    -----
    This function transposes all arrays, while fetch_mldata only transposes
    'data', keep that into account in the tests.
    "
                :arguments 
                  ( ("columns_dict" variable nil (reparse-symbol function_parameters) [12415 12427])
                    ("dataname" variable nil (reparse-symbol function_parameters) [12429 12437])
                    ("matfile" variable nil (reparse-symbol function_parameters) [12439 12446])
                    ("ordering" variable nil (reparse-symbol function_parameters) [12448 12456]))                  )
                nil [12399 13665])
            ("mock_mldata_urlopen" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Object that mocks the urlopen function to fake requests to mldata.

        `mock_datasets` is a dictionary of {dataset_name: data_dict}, or
        {dataset_name: (data_dict, ordering).
        `data_dict` itself is a dictionary of {column_name: data_array},
        and `ordering` is a list of column_names to determine the ordering
        in the data set (see `fake_mldata` for details).

        When requesting a dataset with a name that is in mock_datasets,
        this object creates a fake dataset in a StringIO object and
        returns it. Otherwise, it raises an HTTPError.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13750 14352])
                            ("self" variable nil (reparse-symbol indented_block_body) [14361 14395]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13720 13724])
                            ("mock_datasets" variable nil (reparse-symbol function_parameters) [13726 13739]))                          
                        :documentation "Object that mocks the urlopen function to fake requests to mldata.

        `mock_datasets` is a dictionary of {dataset_name: data_dict}, or
        {dataset_name: (data_dict, ordering).
        `data_dict` itself is a dictionary of {column_name: data_array},
        and `ordering` is a list of column_names to determine the ordering
        in the data set (see `fake_mldata` for details).

        When requesting a dataset with a name that is in mock_datasets,
        this object creates a fake dataset in a StringIO object and
        returns it. Otherwise, it raises an HTTPError.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13707 14396])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14414 14418])
                            ("urlname" variable nil (reparse-symbol function_parameters) [14420 14427]))                          )
                        (reparse-symbol indented_block_body) [14401 15061]))                  
                :type "class")
                nil [13667 15061])
            ("install_mldata_mock" function (:arguments 
              ( ("mock_datasets" variable nil (reparse-symbol function_parameters) [15087 15100]))              ) nil [15063 15255])
            ("uninstall_mldata_mock" function nil nil [15257 15411])
            ("META_ESTIMATORS" variable nil nil [15474 15631])
            ("OTHER" variable nil nil [15696 15779])
            ("DONT_TEST" variable nil nil [15800 16642])
            ("all_estimators" function
               (:documentation "Get a list of all estimators from sklearn.

    This function crawls the module and gets all classes that inherit
    from BaseEstimator. Classes that are defined in test-modules are not
    included.
    By default meta_estimators such as GridSearchCV are also not included.

    Parameters
    ----------
    include_meta_estimators : boolean, default=False
        Whether to include meta-estimators that can be constructed using
        an estimator as their first argument. These are currently
        BaseEnsemble, OneVsOneClassifier, OutputCodeClassifier,
        OneVsRestClassifier, RFE, RFECV.

    include_other : boolean, default=False
        Wether to include meta-estimators that are somehow special and can
        not be default-constructed sensibly. These are currently
        Pipeline, FeatureUnion and GridSearchCV

    include_dont_test : boolean, default=False
        Whether to include \"special\" label estimator or test processors.

    type_filter : string, list of string,  or None, default=None
        Which kind of estimators should be returned. If None, no filter is
        applied and all estimators are returned.  Possible values are
        'classifier', 'regressor', 'cluster' and 'transformer' to get
        estimators only of these specific types, or a list of these to
        get the estimators that fit at least one of the types.

    Returns
    -------
    estimators : list of tuples
        List of (name, class), where ``name`` is the class name as string
        and ``class`` is the actuall type of the class.
    "
                :arguments 
                  ( ("include_meta_estimators" variable nil (reparse-symbol function_parameters) [16664 16687])
                    ("include_other" variable nil (reparse-symbol function_parameters) [16714 16727])
                    ("type_filter" variable nil (reparse-symbol function_parameters) [16735 16746])
                    ("include_dont_test" variable nil (reparse-symbol function_parameters) [16772 16789]))                  )
                nil [16645 20645])
            ("set_random_state" function (:arguments 
              ( ("estimator" variable nil (reparse-symbol function_parameters) [20668 20677])
                ("random_state" variable nil (reparse-symbol function_parameters) [20679 20691]))              ) nil [20647 20808])
            ("if_matplotlib" function
               (:documentation "Test decorator that skips test if matplotlib not installed. "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [20828 20832]))                  )
                nil [20810 21283])
            ("if_not_mac_os" function
               (:documentation "Test decorator that skips test if OS is Mac OS X and its
    major version is one of ``versions``.
    "
                :arguments 
                  ( ("versions" variable nil (reparse-symbol function_parameters) [21303 21311])
                    ("message" variable nil (reparse-symbol function_parameters) [21356 21363]))                  )
                nil [21285 21857])
            ("clean_warning_registry" function (:documentation "Safe way to reset warnings ") nil [21859 22165])
            ("check_skip_network" function nil nil [22167 22326])
            ("check_skip_travis" function (:documentation "Skip test if being run on Travis.") nil [22328 22506])
            ("with_network" variable nil nil [22507 22552])
            ("with_travis" variable nil nil [22553 22596]))          
      :file "testing.py"
      :pointmax 22597
      :fsize 22596
      :lastmodtime '(21811 4727 0 0)
      :unmatched-syntax '((INDENT_BLOCK 2419 . 2728) (NEWLINE 2418 . 2419) (COLON 2417 . 2418) (TRY 2302 . 2305) (AS 2413 . 2415))))
  :file "!home!admin!jingwen.hjw!learn!fix-bug-#4618!sklearn!utils!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
