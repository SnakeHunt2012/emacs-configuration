;; Object sklearn/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sklearn/"
  :tables
  (list
    (semanticdb-table "cross_validation.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
The :mod:`sklearn.cross_validation` module includes utilities for cross-
validation and performance evaluation.
\"\"\"" code nil nil [1 120])
            ("__future__" include nil nil [317 354])
            ("__future__" include nil nil [355 386])
            ("warnings" include nil nil [388 403])
            ("itertools" include nil nil [404 445])
            ("math" include nil nil [446 485])
            ("numbers" include nil nil [486 500])
            ("time" include nil nil [501 512])
            ("abc" include nil nil [513 552])
            ("numpy" include nil nil [554 572])
            ("scipy.sparse" include nil nil [573 598])
            ("clone" include nil nil [611 638])
            ("is_classifier" include nil nil [611 638])
            ("safe_indexing" include nil nil [651 702])
            ("check_random_state" include nil nil [651 702])
            ("indexable" include nil nil [651 702])
            ("" code nil nil [733 820])
            ("type_of_target" include nil nil [844 865])
            ("logger" include nil nil [889 921])
            ("delayed" include nil nil [889 921])
            ("Parallel" include nil nil [889 921])
            ("with_metaclass" include nil nil [942 963])
            ("zip" include nil nil [990 1000])
            ("check_scoring" include nil nil [1022 1042])
            ("bincount" include nil nil [1061 1076])
            ("__all__" variable nil nil [1078 1484])
            ("_PartitionIterator" type
               (:documentation "Base class for CV iterators where train_mask = ~test_mask

    Implementations must define `_iter_test_masks` or `_iter_test_indices`.

    Parameters
    ----------
    n : int
        Total number of elements in dataset.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1812 1906])
                            ("self" variable nil (reparse-symbol indented_block_body) [1914 1929]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1794 1798])
                            ("n" variable nil (reparse-symbol function_parameters) [1800 1801]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1781 1930])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1948 1952]))                          )
                        (reparse-symbol indented_block_body) [1935 2217])
                    ("_iter_test_masks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2359 2363]))                          
                        :documentation "Generates boolean masks corresponding to test sets.

        By default, delegates to _iter_test_indices()
        ")
                        (reparse-symbol indented_block_body) [2338 2661])
                    ("_iter_test_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2689 2693]))                          
                        :documentation "Generates integer indices corresponding to test sets.")
                        (reparse-symbol indented_block_body) [2666 2798])
                    ("_empty_mask" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2819 2823]))                          )
                        (reparse-symbol indented_block_body) [2803 2873]))                  
                :type "class")
                nil [1487 2873])
            ("LeaveOneOut" type
               (:documentation "Leave-One-Out cross validation iterator.

    Provides train/test indices to split data in train test sets. Each
    sample is used once as a test set (singleton) while the remaining
    samples form the training set.

    Note: ``LeaveOneOut(n)`` is equivalent to ``KFold(n, n_folds=n)`` and
    ``LeavePOut(n, p=1)``.

    Due to the high number of test sets (which is the same as the
    number of samples) this cross validation method can be very costly.
    For large datasets one should favor KFold, StratifiedKFold or
    ShuffleSplit.

    Parameters
    ----------
    n : int
        Total number of elements in dataset.

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4]])
    >>> y = np.array([1, 2])
    >>> loo = cross_validation.LeaveOneOut(2)
    >>> len(loo)
    2
    >>> print(loo)
    sklearn.cross_validation.LeaveOneOut(n=2)
    >>> for train_index, test_index in loo:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    ...    print(X_train, X_test, y_train, y_test)
    TRAIN: [1] TEST: [0]
    [[3 4]] [[1 2]] [2] [1]
    TRAIN: [0] TEST: [1]
    [[1 2]] [[3 4]] [1] [2]

    See also
    --------
    LeaveOneLabelOut for splitting the data according to explicit,
    domain-specific stratification of the dataset.
    "
                :superclasses ("_PartitionIterator")
                :members 
                  ( ("_iter_test_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4387 4391]))                          )
                        (reparse-symbol indented_block_body) [4364 4423])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4441 4445]))                          )
                        (reparse-symbol indented_block_body) [4428 4587])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4604 4608]))                          )
                        (reparse-symbol indented_block_body) [4592 4633]))                  
                :type "class")
                nil [2875 4633])
            ("LeavePOut" type
               (:documentation "Leave-P-Out cross validation iterator

    Provides train/test indices to split data in train test sets. This results
    in testing on all distinct samples of size p, while the remaining n - p
    samples form the training set in each iteration.

    Note: ``LeavePOut(n, p)`` is NOT equivalent to ``KFold(n, n_folds=n // p)``
    which creates non-overlapping test sets.

    Due to the high number of iterations which grows combinatorically with the
    number of samples this cross validation method can be very costly. For
    large datasets one should favor KFold, StratifiedKFold or ShuffleSplit.

    Parameters
    ----------
    n : int
        Total number of elements in dataset.

    p : int
        Size of the test sets.

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])
    >>> y = np.array([1, 2, 3, 4])
    >>> lpo = cross_validation.LeavePOut(4, 2)
    >>> len(lpo)
    6
    >>> print(lpo)
    sklearn.cross_validation.LeavePOut(n=4, p=2)
    >>> for train_index, test_index in lpo:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    TRAIN: [2 3] TEST: [0 1]
    TRAIN: [1 3] TEST: [0 2]
    TRAIN: [1 2] TEST: [0 3]
    TRAIN: [0 3] TEST: [1 2]
    TRAIN: [0 2] TEST: [1 3]
    TRAIN: [0 1] TEST: [2 3]
    "
                :superclasses ("_PartitionIterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6159 6193])
                            ("self" variable nil (reparse-symbol indented_block_body) [6202 6212]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6138 6142])
                            ("n" variable nil (reparse-symbol function_parameters) [6144 6145])
                            ("p" variable nil (reparse-symbol function_parameters) [6147 6148]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6125 6213])
                    ("_iter_test_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6241 6245]))                          )
                        (reparse-symbol indented_block_body) [6218 6338])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6356 6360]))                          )
                        (reparse-symbol indented_block_body) [6343 6528])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6545 6549]))                          )
                        (reparse-symbol indented_block_body) [6533 6658]))                  
                :type "class")
                nil [4635 6658])
            ("_BaseKFold" type
               (:documentation "Base class to validate KFold approaches"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6861 6896])
                            ("if" code nil (reparse-symbol indented_block_body) [6906 7018])
                            ("self" variable nil (reparse-symbol indented_block_body) [7026 7063])
                            ("if" code nil (reparse-symbol indented_block_body) [7073 7305])
                            ("if" code nil (reparse-symbol indented_block_body) [7313 7505])
                            ("if" code nil (reparse-symbol indented_block_body) [7514 7665])
                            ("self" variable nil (reparse-symbol indented_block_body) [7673 7695])
                            ("self" variable nil (reparse-symbol indented_block_body) [7704 7736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6811 6815])
                            ("n" variable nil (reparse-symbol function_parameters) [6817 6818])
                            ("n_folds" variable nil (reparse-symbol function_parameters) [6820 6827])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [6829 6836])
                            ("random_state" variable nil (reparse-symbol function_parameters) [6838 6850]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6778 7737]))                  
                :type "class")
                nil [6660 7737])
            ("KFold" type
               (:documentation "K-Folds cross validation iterator.

    Provides train/test indices to split data in train test sets. Split
    dataset into k consecutive folds (without shuffling).

    Each fold is then used a validation set once while the k - 1 remaining
    fold form the training set.

    Parameters
    ----------
    n : int
        Total number of elements.

    n_folds : int, default=3
        Number of folds. Must be at least 2.

    shuffle : boolean, optional
        Whether to shuffle the data before splitting into batches.

    random_state : None, int or RandomState
        Pseudo-random number generator state used for random
        sampling. If None, use default numpy RNG for shuffling

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
    >>> y = np.array([1, 2, 3, 4])
    >>> kf = cross_validation.KFold(4, n_folds=2)
    >>> len(kf)
    2
    >>> print(kf)  # doctest: +NORMALIZE_WHITESPACE
    sklearn.cross_validation.KFold(n=4, n_folds=2, shuffle=False,
                                   random_state=None)
    >>> for train_index, test_index in kf:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    TRAIN: [2 3] TEST: [0 1]
    TRAIN: [0 1] TEST: [2 3]

    Notes
    -----
    The first n % n_folds folds have size n // n_folds + 1, other folds have
    size n // n_folds.

    See also
    --------
    StratifiedKFold: take label information into account to avoid building
    folds with imbalanced class distributions (for binary or multiclass
    classification tasks).
    "
                :superclasses ("_BaseKFold")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [9580 9642])
                            ("self" variable nil (reparse-symbol indented_block_body) [9651 9675])
                            ("if" code nil (reparse-symbol indented_block_body) [9684 9787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9500 9504])
                            ("n" variable nil (reparse-symbol function_parameters) [9506 9507])
                            ("n_folds" variable nil (reparse-symbol function_parameters) [9509 9516])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [9520 9527])
                            ("random_state" variable nil (reparse-symbol function_parameters) [9552 9564]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9487 9787])
                    ("_iter_test_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9815 9819]))                          )
                        (reparse-symbol indented_block_body) [9792 10158])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10176 10180]))                          )
                        (reparse-symbol indented_block_body) [10163 10446])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10463 10467]))                          )
                        (reparse-symbol indented_block_body) [10451 10498]))                  
                :type "class")
                nil [7739 10498])
            ("StratifiedKFold" type
               (:documentation "Stratified K-Folds cross validation iterator

    Provides train/test indices to split data in train test sets.

    This cross-validation object is a variation of KFold that
    returns stratified folds. The folds are made by preserving
    the percentage of samples for each class.

    Parameters
    ----------
    y : array-like, [n_samples]
        Samples to split in K folds.

    n_folds : int, default=3
        Number of folds. Must be at least 2.

    shuffle : boolean, optional
        Whether to shuffle each stratification of the data before splitting
        into batches.

    random_state : None, int or RandomState
        Pseudo-random number generator state used for random
        sampling. If None, use default numpy RNG for shuffling

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
    >>> y = np.array([0, 0, 1, 1])
    >>> skf = cross_validation.StratifiedKFold(y, n_folds=2)
    >>> len(skf)
    2
    >>> print(skf)  # doctest: +NORMALIZE_WHITESPACE
    sklearn.cross_validation.StratifiedKFold(labels=[0 0 1 1], n_folds=2,
                                             shuffle=False, random_state=None)
    >>> for train_index, test_index in skf:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    TRAIN: [1 3] TEST: [0 2]
    TRAIN: [0 2] TEST: [1 3]

    Notes
    -----
    All the folds have size trunc(n_samples / n_folds), the last one has the
    complementary.

    "
                :superclasses ("_BaseKFold")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [12258 12348])
                            ("y" variable nil (reparse-symbol indented_block_body) [12357 12374])
                            ("n_samples" variable nil (reparse-symbol indented_block_body) [12383 12405])
                            ("unique_labels, y_inversed" code nil (reparse-symbol indented_block_body) [12414 12475])
                            ("label_counts" variable nil (reparse-symbol indented_block_body) [12484 12519])
                            ("min_labels" variable nil (reparse-symbol indented_block_body) [12528 12561])
                            ("if" code nil (reparse-symbol indented_block_body) [12570 12931])
                            ("if" code nil (reparse-symbol indented_block_body) [13006 13129])
                            ("per_label_cvs" variable nil (reparse-symbol indented_block_body) [13310 13462])
                            ("test_folds" variable nil (reparse-symbol indented_block_body) [13471 13517])
                            ("for" code nil (reparse-symbol indented_block_body) [13526 14341])
                            ("self" variable nil (reparse-symbol indented_block_body) [14350 14378])
                            ("self" variable nil (reparse-symbol indented_block_body) [14387 14397]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12178 12182])
                            ("y" variable nil (reparse-symbol function_parameters) [12184 12185])
                            ("n_folds" variable nil (reparse-symbol function_parameters) [12187 12194])
                            ("shuffle" variable nil (reparse-symbol function_parameters) [12198 12205])
                            ("random_state" variable nil (reparse-symbol function_parameters) [12230 12242]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12165 14398])
                    ("_iter_test_masks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14424 14428]))                          )
                        (reparse-symbol indented_block_body) [14403 14508])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14526 14530]))                          )
                        (reparse-symbol indented_block_body) [14513 14801])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14818 14822]))                          )
                        (reparse-symbol indented_block_body) [14806 14853]))                  
                :type "class")
                nil [10500 14853])
            ("LeaveOneLabelOut" type
               (:documentation "Leave-One-Label_Out cross-validation iterator

    Provides train/test indices to split data according to a third-party
    provided label. This label information can be used to encode arbitrary
    domain specific stratifications of the samples as integers.

    For instance the labels could be the year of collection of the samples
    and thus allow for cross-validation against time-based splits.

    Parameters
    ----------
    labels : array-like of int with shape (n_samples,)
        Arbitrary domain-specific stratification of the data to be used
        to draw the splits.

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])
    >>> y = np.array([1, 2, 1, 2])
    >>> labels = np.array([1, 1, 2, 2])
    >>> lol = cross_validation.LeaveOneLabelOut(labels)
    >>> len(lol)
    2
    >>> print(lol)
    sklearn.cross_validation.LeaveOneLabelOut(labels=[1 1 2 2])
    >>> for train_index, test_index in lol:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    ...    print(X_train, X_test, y_train, y_test)
    TRAIN: [2 3] TEST: [0 1]
    [[5 6]
     [7 8]] [[1 2]
     [3 4]] [1 2] [1 2]
    TRAIN: [0 1] TEST: [2 3]
    [[1 2]
     [3 4]] [[5 6]
     [7 8]] [1 2] [1 2]

    "
                :superclasses ("_PartitionIterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [16348 16399])
                            ("self" variable nil (reparse-symbol indented_block_body) [16482 16523])
                            ("self" variable nil (reparse-symbol indented_block_body) [16532 16570])
                            ("self" variable nil (reparse-symbol indented_block_body) [16579 16625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16325 16329])
                            ("labels" variable nil (reparse-symbol function_parameters) [16331 16337]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16312 16626])
                    ("_iter_test_masks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16652 16656]))                          )
                        (reparse-symbol indented_block_body) [16631 16731])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16749 16753]))                          )
                        (reparse-symbol indented_block_body) [16736 16905])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16922 16926]))                          )
                        (reparse-symbol indented_block_body) [16910 16965]))                  
                :type "class")
                nil [14855 16965])
            ("LeavePLabelOut" type
               (:documentation "Leave-P-Label_Out cross-validation iterator

    Provides train/test indices to split data according to a third-party
    provided label. This label information can be used to encode arbitrary
    domain specific stratifications of the samples as integers.

    For instance the labels could be the year of collection of the samples
    and thus allow for cross-validation against time-based splits.

    The difference between LeavePLabelOut and LeaveOneLabelOut is that
    the former builds the test sets with all the samples assigned to
    ``p`` different values of the labels while the latter uses samples
    all assigned the same labels.

    Parameters
    ----------
    labels : array-like of int with shape (n_samples,)
        Arbitrary domain-specific stratification of the data to be used
        to draw the splits.

    p : int
        Number of samples to leave out in the test split.

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> X = np.array([[1, 2], [3, 4], [5, 6]])
    >>> y = np.array([1, 2, 1])
    >>> labels = np.array([1, 2, 3])
    >>> lpl = cross_validation.LeavePLabelOut(labels, p=2)
    >>> len(lpl)
    3
    >>> print(lpl)
    sklearn.cross_validation.LeavePLabelOut(labels=[1 2 3], p=2)
    >>> for train_index, test_index in lpl:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    ...    print(X_train, X_test, y_train, y_test)
    TRAIN: [2] TEST: [0 1]
    [[5 6]] [[1 2]
     [3 4]] [1] [1 2]
    TRAIN: [1] TEST: [0 2]
    [[3 4]] [[1 2]
     [5 6]] [2] [1 1]
    TRAIN: [0] TEST: [1 2]
    [[1 2]] [[3 4]
     [5 6]] [1] [2 1]
    "
                :superclasses ("_PartitionIterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [18877 18926])
                            ("self" variable nil (reparse-symbol indented_block_body) [18935 18976])
                            ("self" variable nil (reparse-symbol indented_block_body) [18985 19023])
                            ("self" variable nil (reparse-symbol indented_block_body) [19032 19078])
                            ("self" variable nil (reparse-symbol indented_block_body) [19087 19097]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18777 18781])
                            ("labels" variable nil (reparse-symbol function_parameters) [18783 18789])
                            ("p" variable nil (reparse-symbol function_parameters) [18791 18792]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18764 19098])
                    ("_iter_test_masks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19124 19128]))                          )
                        (reparse-symbol indented_block_body) [19103 19424])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19442 19446]))                          )
                        (reparse-symbol indented_block_body) [19429 19624])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19641 19645]))                          )
                        (reparse-symbol indented_block_body) [19629 19801]))                  
                :type "class")
                nil [16967 19801])
            ("BaseShuffleSplit" type
               (:documentation "Base class for ShuffleSplit and StratifiedShuffleSplit"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20033 20043])
                            ("self" variable nil (reparse-symbol indented_block_body) [20052 20072])
                            ("self" variable nil (reparse-symbol indented_block_body) [20081 20113])
                            ("self" variable nil (reparse-symbol indented_block_body) [20217 20243])
                            ("self" variable nil (reparse-symbol indented_block_body) [20346 20374])
                            ("self, self" code nil (reparse-symbol indented_block_body) [20384 20521]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19935 19939])
                            ("n" variable nil (reparse-symbol function_parameters) [19941 19942])
                            ("n_iter" variable nil (reparse-symbol function_parameters) [19944 19950])
                            ("test_size" variable nil (reparse-symbol function_parameters) [19955 19964])
                            ("train_size" variable nil (reparse-symbol function_parameters) [19971 19981])
                            ("random_state" variable nil (reparse-symbol function_parameters) [20005 20017]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19922 20522])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20540 20544]))                          )
                        (reparse-symbol indented_block_body) [20527 20641])
                    ("_iter_indices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20684 20688]))                          
                        :documentation "Generate (train, test) indices")
                        (reparse-symbol indented_block_body) [20646 20736]))                  
                :type "class")
                nil [19803 20736])
            ("ShuffleSplit" type
               (:documentation "Random permutation cross-validation iterator.

    Yields indices to split data into training and test sets.

    Note: contrary to other cross-validation strategies, random splits
    do not guarantee that all folds will be different, although this is
    still very likely for sizeable datasets.

    Parameters
    ----------
    n : int
        Total number of elements in the dataset.

    n_iter : int (default 10)
        Number of re-shuffling & splitting iterations.

    test_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the test split.
        If int, represents the absolute number of test samples.
        If None, the value is automatically set accroding to train_size,
        when test_size and train_size are both None, their values will be
        computed by default (.1/.9).

    train_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the train split. If
        int, represents the absolute number of train samples. If None,
        the value is automatically set to the complement of the test size.
        If None, the value is automatically set accroding to test_size,
        when test_size and train_size are both None, their values will be
        computed by default (.1/.9).

    random_state : int or RandomState
        Pseudo-random number generator state used for random sampling.

    Examples
    --------
    >>> from sklearn import cross_validation
    >>> rs = cross_validation.ShuffleSplit(4, n_iter=3,
    ...     test_size=.25, random_state=0)
    >>> len(rs)
    3
    >>> print(rs)
    ... # doctest: +ELLIPSIS
    ShuffleSplit(4, n_iter=3, test_size=0.25, ...)
    >>> for train_index, test_index in rs:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...
    TRAIN: [3 1 0] TEST: [2]
    TRAIN: [2 1 3] TEST: [0]
    TRAIN: [0 2 1] TEST: [3]

    >>> rs = cross_validation.ShuffleSplit(4, n_iter=3,
    ...     train_size=0.5, test_size=.25, random_state=0)
    >>> for train_index, test_index in rs:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...
    TRAIN: [3 1] TEST: [2]
    TRAIN: [2 1] TEST: [0]
    TRAIN: [0 2] TEST: [3]

    "
                :superclasses ("BaseShuffleSplit")
                :members 
                  ( ("_iter_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23152 23156]))                          )
                        (reparse-symbol indented_block_body) [23134 23492])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23510 23514]))                          )
                        (reparse-symbol indented_block_body) [23497 23812])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23829 23833]))                          )
                        (reparse-symbol indented_block_body) [23817 23863]))                  
                :type "class")
                nil [20738 23863])
            ("_validate_shuffle_split" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [23893 23894])
                ("test_size" variable nil (reparse-symbol function_parameters) [23896 23905])
                ("train_size" variable nil (reparse-symbol function_parameters) [23907 23917]))              ) nil [23865 28327])
            ("StratifiedShuffleSplit" type
               (:documentation "Stratified ShuffleSplit cross validation iterator

    Provides train/test indices to split data in train test sets.

    This cross-validation object is a merge of StratifiedKFold and
    ShuffleSplit, which returns stratified randomized folds. The folds
    are made by preserving the percentage of samples for each class.

    Note: like the ShuffleSplit strategy, stratified random splits
    do not guarantee that all folds will be different, although this is
    still very likely for sizeable datasets.

    Parameters
    ----------
    y : array, [n_samples]
        Labels of samples.

    n_iter : int (default 10)
        Number of re-shuffling & splitting iterations.

    test_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the test split.
        If int, represents the absolute number of test samples.
        If None, the value is automatically set accroding  to train_size,
        when test_size and train_size are both None, their values will be
        computed by default (.1/.9).

    train_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the train split. If
        int, represents the absolute number of train samples. If None,
        the value is automatically set to the complement of the test size.
        If None, the value is automatically set accroding to test_size,
        when test_size and train_size are both None, their values will be
        computed by default (.1/.9).

    random_state : int or RandomState
        Pseudo-random number generator state used for random sampling.

    Examples
    --------
    >>> from sklearn.cross_validation import StratifiedShuffleSplit
    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
    >>> y = np.array([0, 0, 1, 1])
    >>> sss = StratifiedShuffleSplit(y, 3, test_size=0.5, random_state=0)
    >>> len(sss)
    3
    >>> print(sss)       # doctest: +ELLIPSIS
    StratifiedShuffleSplit(labels=[0 0 1 1], n_iter=3, ...)
    >>> for train_index, test_index in sss:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    TRAIN: [1 2] TEST: [3 0]
    TRAIN: [0 2] TEST: [1 3]
    TRAIN: [0 2] TEST: [3 1]
    "
                :superclasses ("BaseShuffleSplit")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30951 31114])
                            ("self" variable nil (reparse-symbol indented_block_body) [31124 31144])
                            ("self, self" code nil (reparse-symbol indented_block_body) [31153 31217])
                            ("n_cls" variable nil (reparse-symbol indented_block_body) [31226 31255])
                            ("if" code nil (reparse-symbol indented_block_body) [31265 31568])
                            ("if" code nil (reparse-symbol indented_block_body) [31577 31796])
                            ("if" code nil (reparse-symbol indented_block_body) [31804 32020]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30852 30856])
                            ("y" variable nil (reparse-symbol function_parameters) [30858 30859])
                            ("n_iter" variable nil (reparse-symbol function_parameters) [30861 30867])
                            ("test_size" variable nil (reparse-symbol function_parameters) [30872 30881])
                            ("train_size" variable nil (reparse-symbol function_parameters) [30888 30898])
                            ("random_state" variable nil (reparse-symbol function_parameters) [30922 30934]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30839 32020])
                    ("_iter_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32043 32047]))                          )
                        (reparse-symbol indented_block_body) [32025 33576])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33594 33598]))                          )
                        (reparse-symbol indented_block_body) [33581 33903])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33920 33924]))                          )
                        (reparse-symbol indented_block_body) [33908 33954]))                  
                :type "class")
                nil [28329 33954])
            ("PredefinedSplit" type
               (:documentation "Predefined split cross validation iterator

    Splits the data into training/test set folds according to a predefined
    scheme. Each sample can be assigned to at most one test set fold, as
    specified by the user through the ``test_fold`` parameter.

    Parameters
    ----------
    test_fold : \"array-like, shape (n_samples,)
        test_fold[i] gives the test set fold of sample i. A value of -1
        indicates that the corresponding sample is not part of any test set
        folds, but will instead always be put into the training fold.

    Examples
    --------
    >>> from sklearn.cross_validation import PredefinedSplit
    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
    >>> y = np.array([0, 0, 1, 1])
    >>> ps = PredefinedSplit(test_fold=[0, 1, -1, 1])
    >>> len(ps)
    2
    >>> print(ps)       # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
    sklearn.cross_validation.PredefinedSplit(test_fold=[ 0  1 -1  1])
    >>> for train_index, test_index in ps:
    ...    print(\"TRAIN:\", train_index, \"TEST:\", test_index)
    ...    X_train, X_test = X[train_index], X[test_index]
    ...    y_train, y_test = y[train_index], y[test_index]
    TRAIN: [1 2 3] TEST: [0]
    TRAIN: [0 2] TEST: [1 3]
    "
                :superclasses ("_PartitionIterator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35281 35334])
                            ("self" variable nil (reparse-symbol indented_block_body) [35343 35393])
                            ("self" variable nil (reparse-symbol indented_block_body) [35402 35447])
                            ("self" variable nil (reparse-symbol indented_block_body) [35456 35501])
                            ("self" variable nil (reparse-symbol indented_block_body) [35510 35572]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35255 35259])
                            ("test_fold" variable nil (reparse-symbol function_parameters) [35261 35270]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35242 35573])
                    ("_iter_test_indices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35601 35605]))                          )
                        (reparse-symbol indented_block_body) [35578 35695])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35713 35717]))                          )
                        (reparse-symbol indented_block_body) [35700 35865])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35882 35886]))                          )
                        (reparse-symbol indented_block_body) [35870 35927]))                  
                :type "class")
                nil [33956 35927])
            ("_index_param_value" function
               (:documentation "Private helper function for parameter value indexing."
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [36031 36032])
                    ("v" variable nil (reparse-symbol function_parameters) [36034 36035])
                    ("indices" variable nil (reparse-symbol function_parameters) [36037 36044]))                  )
                nil [36008 36315])
            ("cross_val_predict" function
               (:documentation "Generate cross-validated estimates for each input data point

    Parameters
    ----------
    estimator : estimator object implementing 'fit' and 'predict'
        The object to use to fit the data.

    X : array-like
        The data to fit. Can be, for example a list, or an array at least 2d.

    y : array-like, optional, default: None
        The target variable to try to predict in the case of
        supervised learning.

    cv : cross-validation generator or int, optional, default: None
        A cross-validation generator to use. If int, determines
        the number of folds in StratifiedKFold if y is binary
        or multiclass and estimator is a classifier, or the number
        of folds in KFold otherwise. If None, it is equivalent to cv=3.
        This generator must include all elements in the test set exactly once.
        Otherwise, a ValueError is raised.

    n_jobs : integer, optional
        The number of CPUs to use to do the computation. -1 means
        'all CPUs'.

    verbose : integer, optional
        The verbosity level.

    fit_params : dict, optional
        Parameters to pass to the fit method of the estimator.

    pre_dispatch : int, or string, optional
        Controls the number of jobs that get dispatched during parallel
        execution. Reducing this number can be useful to avoid an
        explosion of memory consumption when more jobs get dispatched
        than CPUs can process. This parameter can be:

            - None, in which case all the jobs are immediately
              created and spawned. Use this for lightweight and
              fast-running jobs, to avoid delays due to on-demand
              spawning of the jobs

            - An int, giving the exact number of total jobs that are
              spawned

            - A string, giving an expression as a function of n_jobs,
              as in '2*n_jobs'

    Returns
    -------
    preds : ndarray
        This is the result of calling 'predict'
    "
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [36339 36348])
                    ("X" variable nil (reparse-symbol function_parameters) [36350 36351])
                    ("y" variable nil (reparse-symbol function_parameters) [36353 36354])
                    ("cv" variable nil (reparse-symbol function_parameters) [36361 36363])
                    ("n_jobs" variable nil (reparse-symbol function_parameters) [36370 36376])
                    ("verbose" variable nil (reparse-symbol function_parameters) [36402 36409])
                    ("fit_params" variable nil (reparse-symbol function_parameters) [36413 36423])
                    ("pre_dispatch" variable nil (reparse-symbol function_parameters) [36430 36442]))                  )
                nil [36317 39337])
            ("_fit_and_predict" function
               (:documentation "Fit estimator and predict values for a given dataset split.

    Parameters
    ----------
    estimator : estimator object implementing 'fit' and 'predict'
        The object to use to fit the data.

    X : array-like of shape at least 2D
        The data to fit.

    y : array-like, optional, default: None
        The target variable to try to predict in the case of
        supervised learning.

    train : array-like, shape (n_train_samples,)
        Indices of training samples.

    test : array-like, shape (n_test_samples,)
        Indices of test samples.

    verbose : integer
        The verbosity level.

    fit_params : dict or None
        Parameters that will be passed to ``estimator.fit``.

    Returns
    -------
    preds : sequence
        Result of calling 'estimator.predict'

    test : array-like
        This is the value of the test parameter
    "
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [39360 39369])
                    ("X" variable nil (reparse-symbol function_parameters) [39371 39372])
                    ("y" variable nil (reparse-symbol function_parameters) [39374 39375])
                    ("train" variable nil (reparse-symbol function_parameters) [39377 39382])
                    ("test" variable nil (reparse-symbol function_parameters) [39384 39388])
                    ("verbose" variable nil (reparse-symbol function_parameters) [39390 39397])
                    ("fit_params" variable nil (reparse-symbol function_parameters) [39399 39409]))                  )
                nil [39339 40831])
            ("_check_is_partition" function
               (:documentation "Check whether locs is a reordering of the array np.arange(n)

    Parameters
    ----------
    locs : ndarray
        integer array to test
    n : int
        number of expected elements

    Returns
    -------
    is_partition : bool
        True iff sorted(locs) is range(n)
    "
                :arguments 
                  ( ("locs" variable nil (reparse-symbol function_parameters) [40857 40861])
                    ("n" variable nil (reparse-symbol function_parameters) [40863 40864]))                  )
                nil [40833 41316])
            ("cross_val_score" function
               (:documentation "Evaluate a score by cross-validation

    Parameters
    ----------
    estimator : estimator object implementing 'fit'
        The object to use to fit the data.

    X : array-like
        The data to fit. Can be, for example a list, or an array at least 2d.

    y : array-like, optional, default: None
        The target variable to try to predict in the case of
        supervised learning.

    scoring : string, callable or None, optional, default: None
        A string (see model evaluation documentation) or
        a scorer callable object / function with signature
        ``scorer(estimator, X, y)``.

    cv : cross-validation generator or int, optional, default: None
        A cross-validation generator to use. If int, determines
        the number of folds in StratifiedKFold if y is binary
        or multiclass and estimator is a classifier, or the number
        of folds in KFold otherwise. If None, it is equivalent to cv=3.

    n_jobs : integer, optional
        The number of CPUs to use to do the computation. -1 means
        'all CPUs'.

    verbose : integer, optional
        The verbosity level.

    fit_params : dict, optional
        Parameters to pass to the fit method of the estimator.

    pre_dispatch : int, or string, optional
        Controls the number of jobs that get dispatched during parallel
        execution. Reducing this number can be useful to avoid an
        explosion of memory consumption when more jobs get dispatched
        than CPUs can process. This parameter can be:

            - None, in which case all the jobs are immediately
              created and spawned. Use this for lightweight and
              fast-running jobs, to avoid delays due to on-demand
              spawning of the jobs

            - An int, giving the exact number of total jobs that are
              spawned

            - A string, giving an expression as a function of n_jobs,
              as in '2*n_jobs'

    Returns
    -------
    scores : array of float, shape=(len(list(cv)),)
        Array of scores of the estimator for each run of the cross validation.
    "
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [41338 41347])
                    ("X" variable nil (reparse-symbol function_parameters) [41349 41350])
                    ("y" variable nil (reparse-symbol function_parameters) [41352 41353])
                    ("scoring" variable nil (reparse-symbol function_parameters) [41360 41367])
                    ("cv" variable nil (reparse-symbol function_parameters) [41374 41376])
                    ("n_jobs" variable nil (reparse-symbol function_parameters) [41383 41389])
                    ("verbose" variable nil (reparse-symbol function_parameters) [41413 41420])
                    ("fit_params" variable nil (reparse-symbol function_parameters) [41424 41434])
                    ("pre_dispatch" variable nil (reparse-symbol function_parameters) [41441 41453]))                  )
                nil [41318 44249])
            ("FitFailedWarning" type
               (:superclasses ("RuntimeWarning")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [44295 44299]))                  
                :type "class")
                nil [44251 44300])
            ("_fit_and_score" function
               (:documentation "Fit estimator and compute scores for a given dataset split.

    Parameters
    ----------
    estimator : estimator object implementing 'fit'
        The object to use to fit the data.

    X : array-like of shape at least 2D
        The data to fit.

    y : array-like, optional, default: None
        The target variable to try to predict in the case of
        supervised learning.

    scorer : callable
        A scorer callable object / function with signature
        ``scorer(estimator, X, y)``.

    train : array-like, shape (n_train_samples,)
        Indices of training samples.

    test : array-like, shape (n_test_samples,)
        Indices of test samples.

    verbose : integer
        The verbosity level.

    error_score : 'raise' (default) or numeric
        Value to assign to the score if an error occurs in estimator fitting.
        If set to 'raise', the error is raised. If a numeric value is given,
        FitFailedWarning is raised. This parameter does not affect the refit
        step, which will always raise the error.

    parameters : dict or None
        Parameters to be set on the estimator.

    fit_params : dict or None
        Parameters that will be passed to ``estimator.fit``.

    return_train_score : boolean, optional, default: False
        Compute and return score on training set.

    return_parameters : boolean, optional, default: False
        Return parameters that has been used for the estimator.

    Returns
    -------
    train_score : float, optional
        Score on training set, returned only if `return_train_score` is `True`.

    test_score : float
        Score on test set.

    n_test_samples : int
        Number of test samples.

    scoring_time : float
        Time spent for fitting and scoring in seconds.

    parameters : dict or None, optional
        The parameters that have been evaluated.
    "
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [44321 44330])
                    ("X" variable nil (reparse-symbol function_parameters) [44332 44333])
                    ("y" variable nil (reparse-symbol function_parameters) [44335 44336])
                    ("scorer" variable nil (reparse-symbol function_parameters) [44338 44344])
                    ("train" variable nil (reparse-symbol function_parameters) [44346 44351])
                    ("test" variable nil (reparse-symbol function_parameters) [44353 44357])
                    ("verbose" variable nil (reparse-symbol function_parameters) [44359 44366])
                    ("parameters" variable nil (reparse-symbol function_parameters) [44387 44397])
                    ("fit_params" variable nil (reparse-symbol function_parameters) [44399 44409])
                    ("return_train_score" variable nil (reparse-symbol function_parameters) [44411 44429])
                    ("return_parameters" variable nil (reparse-symbol function_parameters) [44456 44473])
                    ("error_score" variable nil (reparse-symbol function_parameters) [44481 44492]))                  )
                nil [44302 48681])
            ("_safe_split" function
               (:documentation "Create subset of dataset and properly handle kernels."
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [48699 48708])
                    ("X" variable nil (reparse-symbol function_parameters) [48710 48711])
                    ("y" variable nil (reparse-symbol function_parameters) [48713 48714])
                    ("indices" variable nil (reparse-symbol function_parameters) [48716 48723])
                    ("train_indices" variable nil (reparse-symbol function_parameters) [48725 48738]))                  )
                nil [48683 49952])
            ("_score" function
               (:documentation "Compute the score of an estimator on a given test set."
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [49965 49974])
                    ("X_test" variable nil (reparse-symbol function_parameters) [49976 49982])
                    ("y_test" variable nil (reparse-symbol function_parameters) [49984 49990])
                    ("scorer" variable nil (reparse-symbol function_parameters) [49992 49998]))                  )
                nil [49954 50386])
            ("_permutation_test_score" function
               (:documentation "Auxiliary function for permutation_test_score"
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [50416 50425])
                    ("X" variable nil (reparse-symbol function_parameters) [50427 50428])
                    ("y" variable nil (reparse-symbol function_parameters) [50430 50431])
                    ("cv" variable nil (reparse-symbol function_parameters) [50433 50435])
                    ("scorer" variable nil (reparse-symbol function_parameters) [50437 50443]))                  )
                nil [50388 50682])
            ("_shuffle" function
               (:documentation "Return a shuffled copy of y eventually shuffle among same labels."
                :arguments 
                  ( ("y" variable nil (reparse-symbol function_parameters) [50697 50698])
                    ("labels" variable nil (reparse-symbol function_parameters) [50700 50706])
                    ("random_state" variable nil (reparse-symbol function_parameters) [50708 50720]))                  )
                nil [50684 51086])
            ("check_cv" function
               (:documentation "Input checker utility for building a CV in a user friendly way.

    Parameters
    ----------
    cv : int, a cv generator instance, or None
        The input specifying which cv generator to use. It can be an
        integer, in which case it is the number of folds in a KFold,
        None, in which case 3 fold is used, or another object, that
        will then be used as a cv generator.

    X : array-like
        The data the cross-val object will be applied on.

    y : array-like
        The target variable for a supervised learning problem.

    classifier : boolean optional
        Whether the task is a classification task, in which case
        stratified KFold will be used.

    Returns
    -------
    checked_cv: a cross-validation generator instance.
        The return value is guaranteed to be a cv generator instance, whatever
        the input type.
    "
                :arguments 
                  ( ("cv" variable nil (reparse-symbol function_parameters) [51101 51103])
                    ("X" variable nil (reparse-symbol function_parameters) [51105 51106])
                    ("y" variable nil (reparse-symbol function_parameters) [51113 51114])
                    ("classifier" variable nil (reparse-symbol function_parameters) [51121 51131]))                  )
                nil [51088 52089])
            ("_check_cv" function (:arguments 
              ( ("cv" variable nil (reparse-symbol function_parameters) [52105 52107])
                ("X" variable nil (reparse-symbol function_parameters) [52109 52110])
                ("y" variable nil (reparse-symbol function_parameters) [52117 52118])
                ("classifier" variable nil (reparse-symbol function_parameters) [52125 52135]))              ) nil [52091 52703])
            ("permutation_test_score" function
               (:documentation "Evaluate the significance of a cross-validated score with permutations

    Parameters
    ----------
    estimator : estimator object implementing 'fit'
        The object to use to fit the data.

    X : array-like of shape at least 2D
        The data to fit.

    y : array-like
        The target variable to try to predict in the case of
        supervised learning.

    scoring : string, callable or None, optional, default: None
        A string (see model evaluation documentation) or
        a scorer callable object / function with signature
        ``scorer(estimator, X, y)``.

    cv : integer or cross-validation generator, optional
        If an integer is passed, it is the number of fold (default 3).
        Specific cross-validation objects can be passed, see
        sklearn.cross_validation module for the list of possible objects.

    n_permutations : integer, optional
        Number of times to permute ``y``.

    n_jobs : integer, optional
        The number of CPUs to use to do the computation. -1 means
        'all CPUs'.

    labels : array-like of shape [n_samples] (optional)
        Labels constrain the permutation among groups of samples with
        a same label.

    random_state : RandomState or an int seed (0 by default)
        A random number generator instance to define the state of the
        random permutations generator.

    verbose : integer, optional
        The verbosity level.

    Returns
    -------
    score : float
        The true score without permuting targets.

    permutation_scores : array, shape (n_permutations,)
        The scores obtained for each permutations.

    pvalue : float
        The returned value equals p-value if `scoring` returns bigger
        numbers for better scores (e.g., accuracy_score). If `scoring` is
        rather a loss function (i.e. when lower is better such as with
        `mean_squared_error`) then this is actually the complement of the
        p-value:  1 - p-value.

    Notes
    -----
    This function implements Test 1 in:

        Ojala and Garriga. Permutation Tests for Studying Classifier
        Performance.  The Journal of Machine Learning Research (2010)
        vol. 11

    "
                :arguments 
                  ( ("estimator" variable nil (reparse-symbol function_parameters) [52732 52741])
                    ("X" variable nil (reparse-symbol function_parameters) [52743 52744])
                    ("y" variable nil (reparse-symbol function_parameters) [52746 52747])
                    ("cv" variable nil (reparse-symbol function_parameters) [52749 52751])
                    ("n_permutations" variable nil (reparse-symbol function_parameters) [52785 52799])
                    ("n_jobs" variable nil (reparse-symbol function_parameters) [52805 52811])
                    ("labels" variable nil (reparse-symbol function_parameters) [52815 52821])
                    ("random_state" variable nil (reparse-symbol function_parameters) [52855 52867])
                    ("verbose" variable nil (reparse-symbol function_parameters) [52871 52878])
                    ("scoring" variable nil (reparse-symbol function_parameters) [52882 52889]))                  )
                nil [52705 55913])
            ("permutation_test_score" variable nil nil [55915 55954])
            ("train_test_split" function
               (:documentation "Split arrays or matrices into random train and test subsets

    Quick utility that wraps input validation and
    ``next(iter(ShuffleSplit(n_samples)))`` and application to input
    data into a single call for splitting (and optionally subsampling)
    data in a oneliner.

    Parameters
    ----------
    *arrays : sequence of arrays or scipy.sparse matrices with same shape[0]
        Python lists or tuples occurring in arrays are converted to 1D numpy
        arrays.

    test_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the test split. If
        int, represents the absolute number of test samples. If None,
        the value is automatically set to the complement of the train size.
        If train size is also None, test size is set to 0.25.

    train_size : float, int, or None (default is None)
        If float, should be between 0.0 and 1.0 and represent the
        proportion of the dataset to include in the train split. If
        int, represents the absolute number of train samples. If None,
        the value is automatically set to the complement of the test size.

    random_state : int or RandomState
        Pseudo-random number generator state used for random sampling.

    Returns
    -------
    splitting : list of arrays, length=2 * len(arrays)
        List containing train-test split of input array.

    Examples
    --------
    >>> import numpy as np
    >>> from sklearn.cross_validation import train_test_split
    >>> X, y = np.arange(10).reshape((5, 2)), range(5)
    >>> X
    array([[0, 1],
           [2, 3],
           [4, 5],
           [6, 7],
           [8, 9]])
    >>> list(y)
    [0, 1, 2, 3, 4]

    >>> X_train, X_test, y_train, y_test = train_test_split(
    ...     X, y, test_size=0.33, random_state=42)
    ...
    >>> X_train
    array([[4, 5],
           [0, 1],
           [6, 7]])
    >>> y_train
    [2, 0, 3]
    >>> X_test
    array([[2, 3],
           [8, 9]])
    >>> y_test
    [1, 4]

    "
                :arguments 
                  ( ("arrays" variable nil (reparse-symbol function_parameters) [56010 56017])
                    ("options" variable nil (reparse-symbol function_parameters) [56019 56028]))                  )
                nil [55989 59847])
            ("train_test_split" variable nil nil [59849 59882]))          
      :file "cross_validation.py"
      :pointmax 59915
      :fsize 59914
      :lastmodtime '(21844 15170 0 0)
      :unmatched-syntax '((NAME 48494 . 48497) (IF 48514 . 48516) (ELSE 48536 . 48540) (INDENT_BLOCK 48056 . 48220) (NEWLINE 48055 . 48056) (COLON 48054 . 48055) (ELSE 48050 . 48054) (INDENT_BLOCK 47306 . 48045) (NEWLINE 47305 . 47306) (COLON 47304 . 47305) (TRY 47124 . 47127) (AS 47300 . 47302) (NAME 46718 . 46728) (IF 46742 . 46744) (ELSE 46768 . 46772) (NAME 40345 . 40355) (IF 40369 . 40371) (ELSE 40395 . 40399) (NAME 19826 . 19840) (PAREN_BLOCK 19840 . 19849) (NAME 6677 . 6691) (PAREN_BLOCK 6691 . 6720) (NAME 1512 . 1526) (PAREN_BLOCK 1526 . 1535) (FROM 1043 . 1047) (PERIOD 1048 . 1049) (FROM 1001 . 1005) (PERIOD 1006 . 1007) (FROM 964 . 968) (PERIOD 969 . 970) (FROM 922 . 926) (PERIOD 927 . 928) (FROM 866 . 870) (PERIOD 871 . 872) (FROM 821 . 825) (PERIOD 826 . 827) (FROM 703 . 707) (PERIOD 708 . 709) (FROM 639 . 643) (PERIOD 644 . 645) (FROM 600 . 604) (PERIOD 605 . 606))))
  :file "!home!admin!jingwen.hjw!learn!fix-bug-#4618!sklearn!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
